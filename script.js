const canvas = document.getElementById('canvas1');
const ctx = canvas.getContext('2d')
canvas.width = window.innerWidth;
canvas.height = window.innerHeight;

let gradient = ctx.createLinearGradient(0,canvas.height,canvas.width,0); //start1, start2, end1, end2
//let gradient = ctx.createRadialGradient(canvas.width/2,canvas.height/2,100,canvas.width/2,canvas.height/2,200); //x1,y1,radius1,x2,y2,radius2

gradient.addColorStop(0,'red'); //what colors we want the gradient to be made out of
gradient.addColorStop(0.2,'yellow'); //what colors we want the gradient to be made out of
gradient.addColorStop(0.4,'green'); //what colors we want the gradient to be made out of
gradient.addColorStop(0.6,'cyan'); //what colors we want the gradient to be made out of
gradient.addColorStop(0.8,'blue'); //what colors we want the gradient to be made out of
gradient.addColorStop(1,'magenta'); //what colors we want the gradient to be made out of


class Symbol {
    constructor(x,y,fontSize,canvasHeight){
        this.characters = "アァカサタナハマヤャラワガザダバパイィキシチニヒミリヰギジヂビピウゥクスツヌフムユュルグズブヅプエェケセテネヘメレヱゲゼデベペオォコソトノホモヨョロヲゴゾドボポヴッンあ ぁ い ぃ う ぅ え ぇ お ぉ か き く け こ さ し す せ そ た ち つ っ て と な に ぬ ね の は ひ ふ へ ほ ま み む め も や ゃ ゆ ゅ よ ょ ら り る れ ろ わ ゐ ゑ を ん0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        this.x = x;
        this.y = y;
        this.fontSize = fontSize;
        this.text = '';
        this.canvasHeight = canvasHeight;
    }
    draw(context){
        this.text = this.characters.charAt(Math.floor(Math.random()*this.characters.length));
        context.fillText(this.text, this.x * this.fontSize, this.y * this.fontSize);
        if (this.y * this.fontSize > this.canvasHeight && Math.random() > 0.98){ //the higher the decimal number, the more vertical
            this.y = 0;
        } else{
            this.y += 1;
        }
    }
}


class Effect{
    constructor(canvasWidth,canvasHeight){
        this.canvasWidth = canvasWidth;
        this.canvasHeight = canvasHeight;
        this.fontSize = 25;
        this.columns = this.canvasWidth / this.fontSize;
        this.symbols = [];
        this.#initialize();
        console.log(this.symbols)
    }
    #initialize(){ //private method
        for (let i = 0; i < this.columns; i++){
            this.symbols[i] = new Symbol(i, 0, this.fontSize, this.canvasHeight);
        }
    }
    resize(width,height){
        this.canvasWidth = width;
        this.canvasHeight = height;
        this.columns = this.canvasWidth / this.fontSize;
        this.symbols = [];
        this.#initialize();
    }
}

const effect = new Effect(canvas.width, canvas.height);
let lastTime = 0;
const fps = 160;
const nextFrame = 1000/fps;
let timer = 0;


function animate(timeStamp){ //auto-generated by requestAnimationFrame
    const deltaTime = timeStamp - lastTime;
    lastTime = timeStamp;
    if (timer > nextFrame){
        ctx.fillStyle = 'rgba(0, 0, 0, 0.05)'; //black
        ctx.textAlign = 'center'; //corrects for Japanese and Latin characters being centered differently
        ctx.fillRect(0,0,canvas.width,canvas.height); //makes the symbols disappear
        //ctx.fillStyle = "#0aff0a"; //better to do it here than the draw() method that way it is only called once per frame rather than for every symbol per frame
        ctx.fillStyle = gradient;
        ctx.font = effect.fontSize + 'px monospace'; //monospace characters have pixels which have the same horizontal space
        effect.symbols.forEach(symbol => symbol.draw(ctx));
        timer = 0;
    } else {
        timer += deltaTime;
    }

    requestAnimationFrame(animate);

}
animate(0); //0 is for requestAnimation framerate

window.addEventListener('resize',function(){
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;
    effect.resize(canvas.width, canvas.height)
});